"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Mic, MicOff, Volume2, Loader2 } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

interface VoiceInterfaceProps {
  onVoiceCommand?: (command: string) => void
  language?: "hindi" | "english" | "punjabi" | "marathi" | "bhojpuri"
  compact?: boolean
}

export default function VoiceInterface({ onVoiceCommand, language = "hindi", compact = false }: VoiceInterfaceProps) {
  const [isListening, setIsListening] = useState(false)
  const [transcript, setTranscript] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)
  const [isSupported, setIsSupported] = useState(false)

  const voicePrompts = {
    hindi: {
      start: "üé§ ‡§¨‡•ã‡§≤‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
      stop: "‚èπÔ∏è ‡§¨‡•ã‡§≤‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
      listening: "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
      processing: "‡§∏‡§Æ‡§ù ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
      examples: ["‡§Æ‡•à‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§¨‡•á‡§ö‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å", "‡§Ü‡§ú ‡§ï‡§æ ‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?", "‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§ó‡•Ä?", "‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•à‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ?"],
      placeholder: "‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ...",
    },
    english: {
      start: "üé§ Start Speaking",
      stop: "‚èπÔ∏è Stop Speaking",
      listening: "Listening...",
      processing: "Processing...",
      examples: [
        "I want to sell 50 kg wheat",
        "What's today's price?",
        "When will my crop be ready?",
        "How will I get payment?",
      ],
      placeholder: "Your message will appear here...",
    },
    punjabi: {
      start: "üé§ ‡®¨‡©ã‡®≤‡®£‡®æ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡©ã",
      stop: "‚èπÔ∏è ‡®¨‡©ã‡®≤‡®£‡®æ ‡®¨‡©∞‡®¶ ‡®ï‡®∞‡©ã",
      listening: "‡®∏‡©Å‡®£ ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç...",
      processing: "‡®∏‡®Æ‡®ù ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç...",
      examples: ["‡®Æ‡©à‡®Ç 50 ‡®ï‡®ø‡®≤‡©ã ‡®ï‡®£‡®ï ‡®µ‡©á‡®ö‡®£‡®æ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡®æ ‡®π‡®æ‡®Ç", "‡®Ö‡©±‡®ú ‡®¶‡®æ ‡®≠‡®æ‡®Ö ‡®ï‡©Ä ‡®π‡©à?", "‡®Æ‡©á‡®∞‡©Ä ‡®´‡®∏‡®≤ ‡®ï‡®¶‡©ã‡®Ç ‡®§‡®ø‡®Ü‡®∞ ‡®π‡©ã‡®µ‡©á‡®ó‡©Ä?", "‡®™‡©á‡®Æ‡©à‡®Ç‡®ü ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Æ‡®ø‡®≤‡©á‡®ó‡©Ä?"],
      placeholder: "‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡©∞‡®¶‡©á‡®∏‡®º ‡®á‡©±‡®•‡©á ‡®¶‡®ø‡®ñ‡®æ‡®à ‡®¶‡©á‡®µ‡©á‡®ó‡®æ...",
    },
    marathi: {
      start: "üé§ ‡§¨‡•ã‡§≤‡§£‡•á ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ",
      stop: "‚èπÔ∏è ‡§¨‡•ã‡§≤‡§£‡•á ‡§•‡§æ‡§Ç‡§¨‡§µ‡§æ",
      listening: "‡§ê‡§ï‡§§ ‡§Ü‡§π‡•á...",
      processing: "‡§∏‡§Æ‡§ú‡§§ ‡§Ü‡§π‡•á...",
      examples: ["‡§Æ‡§≤‡§æ 50 ‡§ï‡§ø‡§≤‡•ã ‡§ó‡§π‡•Ç ‡§µ‡§ø‡§ï‡§æ‡§Ø‡§ö‡§æ ‡§Ü‡§π‡•á", "‡§Ü‡§ú‡§ö‡§æ ‡§≠‡§æ‡§µ ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á?", "‡§Æ‡§æ‡§ù‡•á ‡§™‡•Ä‡§ï ‡§ï‡§ß‡•Ä ‡§§‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§à‡§≤?", "‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ï‡§∏‡•á ‡§Æ‡§ø‡§≥‡•á‡§≤?"],
      placeholder: "‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§á‡§•‡•á ‡§¶‡§ø‡§∏‡•á‡§≤...",
    },
    bhojpuri: {
      start: "üé§ ‡§¨‡•ã‡§≤‡§≤ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•Ä‡§Ç",
      stop: "‚èπÔ∏è ‡§¨‡•ã‡§≤‡§≤ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•Ä‡§Ç",
      listening: "‡§∏‡•Å‡§®‡§§ ‡§¨‡§æ‡§®‡•Ä...",
      processing: "‡§∏‡§Æ‡§ù‡§§ ‡§¨‡§æ‡§®‡•Ä...",
      examples: ["‡§π‡§Æ 50 ‡§ï‡§ø‡§≤‡•ã ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§¨‡•á‡§ö‡•á ‡§ï‡•á ‡§ö‡§æ‡§π‡§§ ‡§¨‡§æ‡§®‡•Ä", "‡§Ü‡§ú ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§ï‡§æ ‡§¨‡§æ?", "‡§π‡§Æ‡§æ‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§à?", "‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ï‡§á‡§∏‡•á ‡§Æ‡§ø‡§≤‡•Ä?"],
      placeholder: "‡§∞‡§æ‡§â‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§á‡§π‡§æ‡§Å ‡§¶‡•á‡§ñ‡§æ‡§à...",
    },
  }

  useEffect(() => {
    if (typeof window !== "undefined" && "webkitSpeechRecognition" in window) {
      setIsSupported(true)
    }
  }, [])

  const startListening = () => {
    if (!isSupported) return

    setIsListening(true)
    setTranscript("")
    setIsProcessing(false)

    // Simulate voice recognition for demo
    setTimeout(() => {
      setIsProcessing(true)
      setTimeout(() => {
        const examples = voicePrompts[language].examples
        const randomExample = examples[Math.floor(Math.random() * examples.length)]
        setTranscript(randomExample)
        setIsProcessing(false)
        onVoiceCommand?.(randomExample)
      }, 1500)
    }, 2000)
  }

  const stopListening = () => {
    setIsListening(false)
    setIsProcessing(false)
  }

  const speakText = (text: string) => {
    if ("speechSynthesis" in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang =
        language === "hindi" ? "hi-IN" : language === "punjabi" ? "pa-IN" : language === "marathi" ? "mr-IN" : "en-US"
      speechSynthesis.speak(utterance)
    }
  }

  if (compact) {
    return (
      <div className="space-y-3">
        <Button
          size="lg"
          className={`w-full ${
            isListening
              ? "bg-red-500 hover:bg-red-600 animate-pulse"
              : "bg-gradient-to-r from-green-600 to-orange-500 hover:from-green-700 hover:to-orange-600"
          }`}
          onClick={isListening ? stopListening : startListening}
          disabled={!isSupported || isProcessing}
        >
          {isProcessing ? (
            <>
              <Loader2 className="h-5 w-5 mr-2 animate-spin" />
              {voicePrompts[language].processing}
            </>
          ) : isListening ? (
            <>
              <MicOff className="h-5 w-5 mr-2" />
              {voicePrompts[language].stop}
            </>
          ) : (
            <>
              <Mic className="h-5 w-5 mr-2" />
              {voicePrompts[language].start}
            </>
          )}
        </Button>

        <AnimatePresence>
          {(isListening || isProcessing) && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="text-center p-4 bg-gradient-to-r from-green-50 to-orange-50 rounded-lg border-2 border-green-200"
            >
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce" />
                <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce delay-75" />
                <div className="w-2 h-2 bg-green-500 rounded-full animate-bounce delay-150" />
              </div>
              <p className="text-green-700 font-medium">
                {isProcessing ? voicePrompts[language].processing : voicePrompts[language].listening}
              </p>
            </motion.div>
          )}
        </AnimatePresence>

        {transcript && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="p-3 bg-blue-50 rounded-lg border border-blue-200"
          >
            <p className="text-sm text-blue-700 mb-2">‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ:</p>
            <p className="font-medium text-gray-800">{transcript}</p>
            <Button
              variant="outline"
              size="sm"
              className="mt-2 bg-transparent"
              onClick={() => speakText("‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ‡•§ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§")}
            >
              <Volume2 className="h-4 w-4 mr-1" />
              ‡§ú‡§µ‡§æ‡§¨ ‡§∏‡•Å‡§®‡•á‡§Ç
            </Button>
          </motion.div>
        )}
      </div>
    )
  }

  return (
    <Card className="w-full border-2 border-orange-200">
      <CardHeader className="bg-gradient-to-r from-orange-50 to-green-50">
        <CardTitle className="flex items-center gap-2 text-orange-800">
          <Mic className="h-5 w-5" />
          ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡§π‡§æ‡§Ø‡§ï (Voice Assistant)
        </CardTitle>
        <CardDescription>‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4 p-6">
        <div className="text-center">
          <Button
            size="lg"
            className={`w-full ${
              isListening
                ? "bg-red-500 hover:bg-red-600 animate-pulse"
                : "bg-gradient-to-r from-green-600 to-orange-500 hover:from-green-700 hover:to-orange-600"
            }`}
            onClick={isListening ? stopListening : startListening}
            disabled={!isSupported || isProcessing}
          >
            {isProcessing ? (
              <>
                <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                {voicePrompts[language].processing}
              </>
            ) : isListening ? (
              <>
                <MicOff className="h-5 w-5 mr-2" />
                {voicePrompts[language].stop}
              </>
            ) : (
              <>
                <Mic className="h-5 w-5 mr-2" />
                {voicePrompts[language].start}
              </>
            )}
          </Button>
        </div>

        <AnimatePresence>
          {(isListening || isProcessing) && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="text-center p-4 bg-gradient-to-r from-green-50 to-orange-50 rounded-lg border-2 border-green-200"
            >
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-bounce" />
                <div className="w-3 h-3 bg-orange-500 rounded-full animate-bounce delay-75" />
                <div className="w-3 h-3 bg-green-500 rounded-full animate-bounce delay-150" />
              </div>
              <p className="text-green-700 font-medium">
                {isProcessing ? voicePrompts[language].processing : voicePrompts[language].listening}
              </p>
            </motion.div>
          )}
        </AnimatePresence>

        {transcript && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="p-4 bg-blue-50 rounded-lg border border-blue-200"
          >
            <p className="text-sm text-blue-700 mb-2">‡§Ü‡§™‡§®‡•á ‡§ï‡§π‡§æ:</p>
            <p className="font-medium text-gray-800 mb-3">{transcript}</p>
            <Button
              variant="outline"
              size="sm"
              className="bg-transparent"
              onClick={() => speakText("‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ‡•§ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§")}
            >
              <Volume2 className="h-4 w-4 mr-1" />
              ‡§ú‡§µ‡§æ‡§¨ ‡§∏‡•Å‡§®‡•á‡§Ç
            </Button>
          </motion.div>
        )}

        <div className="space-y-2">
          <p className="text-sm font-medium text-gray-700">‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§µ‡§æ‡§ï‡•ç‡§Ø:</p>
          <div className="space-y-1">
            {voicePrompts[language].examples.slice(0, 3).map((example, index) => (
              <div key={index} className="text-xs text-gray-600 p-2 bg-gray-50 rounded border">
                "{example}"
              </div>
            ))}
          </div>
        </div>

        {!isSupported && (
          <div className="text-center p-3 bg-yellow-50 rounded-lg border border-yellow-200">
            <p className="text-sm text-yellow-700">
              ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡§π‡§ö‡§æ‡§® ‡§á‡§∏ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ Chrome ‡§Ø‡§æ Safari ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
