"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Search, Filter, MapPin, Star, Truck, Shield, Leaf, ArrowLeft } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"

export default function MarketplacePage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedLocation, setSelectedLocation] = useState("all")

  const categories = [
    { id: "all", name: "‡§∏‡§≠‡•Ä", icon: "üåæ" },
    { id: "grains", name: "‡§Ö‡§®‡§æ‡§ú", icon: "üåæ" },
    { id: "vegetables", name: "‡§∏‡§¨‡•ç‡§ú‡•Ä", icon: "ü•¨" },
    { id: "fruits", name: "‡§´‡§≤", icon: "üçé" },
    { id: "dairy", name: "‡§°‡•á‡§Ø‡§∞‡•Ä", icon: "ü•õ" },
    { id: "spices", name: "‡§Æ‡§∏‡§æ‡§≤‡•á", icon: "üå∂Ô∏è" },
  ]

  const products = [
    {
      id: 1,
      name: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§µ‡§≤",
      farmer: "‡§ó‡•Å‡§∞‡§¶‡•Ä‡§™ ‡§∏‡§ø‡§Ç‡§π",
      location: "‡§Ö‡§Æ‡•É‡§§‡§∏‡§∞, ‡§™‡§Ç‡§ú‡§æ‡§¨",
      price: "‚Çπ120/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ150/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.8,
      reviews: 156,
      image: "/images/basmati-rice.jpg",
      category: "grains",
      organic: true,
      inStock: true,
      quantity: "50 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡§æ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§µ‡§≤",
      farmerImage: "/images/punjabi-farmer-rice.jpg",
    },
    {
      id: 2,
      name: "‡§§‡§æ‡§ú‡§º‡•á ‡§ü‡§Æ‡§æ‡§ü‡§∞",
      farmer: "‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
      location: "‡§®‡§æ‡§∏‡§ø‡§ï, ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
      price: "‚Çπ40/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ55/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.6,
      reviews: 89,
      image: "/images/fresh-tomatoes.jpg",
      category: "vegetables",
      organic: true,
      inStock: true,
      quantity: "100 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§ñ‡•á‡§§ ‡§∏‡•á ‡§§‡§æ‡§ú‡§º‡•á ‡§§‡•ã‡§°‡§º‡•á ‡§ó‡§è ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ü‡§Æ‡§æ‡§ü‡§∞",
      farmerImage: "/images/female-farmer-vegetables.jpg",
    },
    {
      id: 3,
      name: "‡§ó‡•á‡§π‡•Ç‡§Ç (‡§∂‡§∞‡§¨‡§§‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ)",
      farmer: "‡§∞‡§æ‡§Æ ‡§∏‡§ø‡§Ç‡§π",
      location: "‡§ï‡§∞‡§®‡§æ‡§≤, ‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ",
      price: "‚Çπ35/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ42/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.9,
      reviews: 234,
      image: "/images/wheat-grains.jpg",
      category: "grains",
      organic: false,
      inStock: true,
      quantity: "200 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡§æ ‡§∂‡§∞‡§¨‡§§‡•Ä ‡§ó‡•á‡§π‡•Ç‡§Ç",
      farmerImage: "/images/male-farmer-cotton.jpg",
    },
    {
      id: 4,
      name: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§™‡•ç‡§Ø‡§æ‡§ú",
      farmer: "‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä",
      location: "‡§™‡§ü‡§®‡§æ, ‡§¨‡§ø‡§π‡§æ‡§∞",
      price: "‚Çπ25/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ32/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.5,
      reviews: 67,
      image: "/images/onions-fresh.jpg",
      category: "vegetables",
      organic: true,
      inStock: true,
      quantity: "80 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§¨‡§ø‡§®‡§æ ‡§∞‡§∏‡§æ‡§Ø‡§® ‡§ï‡•á ‡§â‡§ó‡§æ‡§è ‡§ó‡§è ‡§™‡•ç‡§Ø‡§æ‡§ú",
      farmerImage: "/images/female-farmer-rice.jpg",
    },
    {
      id: 5,
      name: "‡§Ü‡§≤‡•Ç (‡§¶‡•á‡§∏‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ)",
      farmer: "‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡§æ‡§¶‡§µ",
      location: "‡§Ü‡§ó‡§∞‡§æ, ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
      price: "‚Çπ20/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ28/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.4,
      reviews: 123,
      image: "/images/potatoes-fresh.jpg",
      category: "vegetables",
      organic: false,
      inStock: true,
      quantity: "150 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§¶‡•á‡§∏‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§ï‡•á ‡§§‡§æ‡§ú‡§º‡•á ‡§Ü‡§≤‡•Ç",
      farmerImage: "/images/male-farmer-wheat.jpg",
    },
    {
      id: 6,
      name: "‡§Æ‡§ø‡§∂‡•ç‡§∞‡§ø‡§§ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç",
      farmer: "‡§Ö‡§®‡§ø‡§§‡§æ ‡§™‡§ü‡•á‡§≤",
      location: "‡§Ö‡§π‡§Æ‡§¶‡§æ‡§¨‡§æ‡§¶, ‡§ó‡•Å‡§ú‡§∞‡§æ‡§§",
      price: "‚Çπ60/‡§ï‡§ø‡§≤‡•ã",
      originalPrice: "‚Çπ75/‡§ï‡§ø‡§≤‡•ã",
      rating: 4.7,
      reviews: 91,
      image: "/images/organic-vegetables.jpg",
      category: "vegetables",
      organic: true,
      inStock: true,
      quantity: "30 ‡§ï‡§ø‡§≤‡•ã ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      description: "‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£",
      farmerImage: "/images/female-farmer.jpg",
    },
  ]

  const filteredProducts = products.filter((product) => {
    const matchesSearch =
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.farmer.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === "all" || product.category === selectedCategory
    const matchesLocation = selectedLocation === "all" || product.location.includes(selectedLocation)

    return matchesSearch && matchesCategory && matchesLocation
  })

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-orange-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b-2 border-green-200">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  ‡§µ‡§æ‡§™‡§∏
                </Button>
              </Link>
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-r from-green-600 to-orange-500 rounded-full flex items-center justify-center">
                  <Leaf className="h-5 w-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-800">KhetSe ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§™‡•ç‡§≤‡•á‡§∏</h1>
                  <p className="text-xs text-orange-600">‡§§‡§æ‡§ú‡§º‡§æ, ‡§∏‡•Ä‡§ß‡§æ, ‡§≠‡§∞‡•ã‡§∏‡•á‡§Æ‡§Ç‡§¶</p>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Badge className="bg-green-600">{filteredProducts.length} ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß</Badge>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Search and Filters */}
        <div className="mb-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§Ø‡§æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 border-green-200 focus:border-green-400"
              />
            </div>

            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="border-green-200">
                <SelectValue placeholder="‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    <span className="flex items-center gap-2">
                      <span>{category.icon}</span>
                      <span>{category.name}</span>
                    </span>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={selectedLocation} onValueChange={setSelectedLocation}>
              <SelectTrigger className="border-green-200">
                <SelectValue placeholder="‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§•‡§æ‡§®</SelectItem>
                <SelectItem value="‡§™‡§Ç‡§ú‡§æ‡§¨">‡§™‡§Ç‡§ú‡§æ‡§¨</SelectItem>
                <SelectItem value="‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ">‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ</SelectItem>
                <SelectItem value="‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞">‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞</SelectItem>
                <SelectItem value="‡§¨‡§ø‡§π‡§æ‡§∞">‡§¨‡§ø‡§π‡§æ‡§∞</SelectItem>
                <SelectItem value="‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂">‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂</SelectItem>
                <SelectItem value="‡§ó‡•Å‡§ú‡§∞‡§æ‡§§">‡§ó‡•Å‡§ú‡§∞‡§æ‡§§</SelectItem>
              </SelectContent>
            </Select>

            <Button className="bg-green-600 hover:bg-green-700">
              <Filter className="h-4 w-4 mr-2" />
              ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§≤‡§ó‡§æ‡§è‡§Ç
            </Button>
          </div>

          {/* Category Tabs */}
          <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className="w-full">
            <TabsList className="grid w-full grid-cols-6 bg-green-50">
              {categories.map((category) => (
                <TabsTrigger
                  key={category.id}
                  value={category.id}
                  className="flex items-center gap-1 text-sm data-[state=active]:bg-green-600 data-[state=active]:text-white"
                >
                  <span>{category.icon}</span>
                  <span className="hidden sm:inline">{category.name}</span>
                </TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
        </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredProducts.map((product, index) => (
            <motion.div
              key={product.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <Card className="h-full hover:shadow-xl transition-all duration-300 border-2 border-green-100 hover:border-green-300 group">
                <div className="relative">
                  <img
                    src={product.image || "/placeholder.svg"}
                    alt={product.name}
                    className="w-full h-48 object-cover rounded-t-lg"
                  />
                  <div className="absolute top-2 left-2 flex gap-2">
                    {product.organic && (
                      <Badge className="bg-green-600 text-xs">
                        <Leaf className="h-3 w-3 mr-1" />
                        ‡§ú‡•à‡§µ‡§ø‡§ï
                      </Badge>
                    )}
                    {product.inStock && (
                      <Badge variant="secondary" className="bg-blue-100 text-blue-800 text-xs">
                        ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Æ‡•á‡§Ç
                      </Badge>
                    )}
                  </div>
                  <div className="absolute top-2 right-2">
                    <div className="bg-white/90 backdrop-blur-sm rounded-full px-2 py-1 text-xs font-medium">
                      {(
                        ((Number.parseFloat(product.originalPrice.replace("‚Çπ", "").replace("/‡§ï‡§ø‡§≤‡•ã", "")) -
                          Number.parseFloat(product.price.replace("‚Çπ", "").replace("/‡§ï‡§ø‡§≤‡•ã", ""))) /
                          Number.parseFloat(product.originalPrice.replace("‚Çπ", "").replace("/‡§ï‡§ø‡§≤‡•ã", ""))) *
                        100
                      ).toFixed(0)}
                      % ‡§õ‡•Ç‡§ü
                    </div>
                  </div>
                </div>

                <CardHeader className="pb-2">
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg text-gray-800 group-hover:text-green-700 transition-colors">
                        {product.name}
                      </CardTitle>
                      <CardDescription className="text-sm text-gray-600">{product.description}</CardDescription>
                    </div>
                  </div>
                </CardHeader>

                <CardContent className="pt-0">
                  {/* Farmer Info */}
                  <div className="flex items-center gap-3 mb-4 p-2 bg-green-50 rounded-lg">
                    <img
                      src={product.farmerImage || "/placeholder.svg"}
                      alt={product.farmer}
                      className="w-10 h-10 object-cover rounded-full border-2 border-green-200"
                    />
                    <div>
                      <p className="font-medium text-sm text-gray-800">{product.farmer}</p>
                      <p className="text-xs text-gray-600 flex items-center gap-1">
                        <MapPin className="h-3 w-3" />
                        {product.location}
                      </p>
                    </div>
                  </div>

                  {/* Rating and Reviews */}
                  <div className="flex items-center gap-2 mb-3">
                    <div className="flex items-center gap-1">
                      <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                      <span className="text-sm font-medium">{product.rating}</span>
                    </div>
                    <span className="text-xs text-gray-500">({product.reviews} ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ)</span>
                  </div>

                  {/* Price */}
                  <div className="flex items-center gap-2 mb-3">
                    <span className="text-2xl font-bold text-green-700">{product.price}</span>
                    <span className="text-sm text-gray-500 line-through">{product.originalPrice}</span>
                  </div>

                  {/* Quantity */}
                  <p className="text-sm text-gray-600 mb-4">{product.quantity}</p>

                  {/* Action Buttons */}
                  <div className="flex gap-2">
                    <Link href={`/crop/${product.id}`} className="flex-1">
                      <Button className="w-full bg-green-600 hover:bg-green-700">
                        <Truck className="h-4 w-4 mr-2" />
                        ‡§Ö‡§≠‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç
                      </Button>
                    </Link>
                    <Button variant="outline" size="sm" className="border-green-200 hover:bg-green-50 bg-transparent">
                      <Shield className="h-4 w-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        {/* No Results */}
        {filteredProducts.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</h3>
            <p className="text-gray-600 mb-4">‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ñ‡•ã‡§ú ‡§Ø‡§æ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§¨‡§¶‡§≤‡§ï‡§∞ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç</p>
            <Button
              onClick={() => {
                setSearchQuery("")
                setSelectedCategory("all")
                setSelectedLocation("all")
              }}
              variant="outline"
              className="border-green-200 hover:bg-green-50"
            >
              ‡§∏‡§≠‡•Ä ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§π‡§ü‡§æ‡§è‡§Ç
            </Button>
          </div>
        )}

        {/* Trust Indicators */}
        <div className="mt-12 bg-white rounded-lg p-6 border-2 border-green-100">
          <h3 className="text-xl font-bold text-center mb-6 text-gray-800">KhetSe ‡§™‡§∞ ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§∞‡•á‡§Ç?</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Shield className="h-6 w-6 text-green-600" />
              </div>
              <h4 className="font-semibold mb-2">‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§≠‡§∞‡•ã‡§∏‡§æ</h4>
              <p className="text-sm text-gray-600">‡§π‡§∞ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§™‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§</p>
            </div>
            <div className="text-center">
              <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Truck className="h-6 w-6 text-orange-600" />
              </div>
              <h4 className="font-semibold mb-2">‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä</h4>
              <p className="text-sm text-gray-600">‡§ñ‡•á‡§§ ‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§Ü‡§™‡§ï‡•á ‡§ò‡§∞ ‡§§‡§ï 24-48 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç</p>
            </div>
            <div className="text-center">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Leaf className="h-6 w-6 text-blue-600" />
              </div>
              <h4 className="font-semibold mb-2">‡§ú‡•à‡§µ‡§ø‡§ï ‡§ó‡§æ‡§∞‡§Ç‡§ü‡•Ä</h4>
              <p className="text-sm text-gray-600">‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§æ‡§¶, ‡§∞‡§∏‡§æ‡§Ø‡§® ‡§Æ‡•Å‡§ï‡•ç‡§§</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
