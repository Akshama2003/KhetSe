"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Search, Filter, MapPin, Star, Shield, Truck, Heart, Leaf } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"

export default function Marketplace() {
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedLocation, setSelectedLocation] = useState("all")

  const crops = [
    {
      id: 1,
      name: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ß‡§æ‡§®",
      farmer: "‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä",
      location: "‡§™‡§ü‡§®‡§æ, ‡§¨‡§ø‡§π‡§æ‡§∞",
      price: "‚Çπ28/kg",
      quantity: "200 kg",
      rating: 4.9,
      image: "/images/basmati-rice.jpg",
      farmerImage: "/images/female-farmer-rice.jpg",
      verified: true,
      organic: true,
      distance: "12 km",
      harvestDate: "2 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á",
      description: "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§∏‡•á ‡§â‡§ó‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§ß‡§æ‡§®",
    },
    {
      id: 2,
      name: "‡§ï‡§™‡§æ‡§∏",
      farmer: "‡§∞‡§æ‡§Æ ‡§∏‡§ø‡§Ç‡§π",
      location: "‡§ï‡§∞‡§®‡§æ‡§≤, ‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ",
      price: "‚Çπ45/kg",
      quantity: "300 kg",
      rating: 4.8,
      image: "/images/organic-vegetables.jpg",
      farmerImage: "/images/male-farmer-cotton.jpg",
      verified: true,
      organic: false,
      distance: "8 km",
      harvestDate: "1 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á",
      description: "‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§ï‡§™‡§æ‡§∏, ‡§∏‡•Ä‡§ß‡•á ‡§ñ‡•á‡§§ ‡§∏‡•á",
    },
    {
      id: 3,
      name: "‡§π‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç",
      farmer: "‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
      location: "‡§®‡§æ‡§∏‡§ø‡§ï, ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
      price: "‚Çπ35/kg",
      quantity: "150 kg",
      rating: 4.7,
      image: "/images/fresh-tomatoes.jpg",
      farmerImage: "/images/female-farmer-vegetables.jpg",
      verified: true,
      organic: true,
      distance: "20 km",
      harvestDate: "‡§Ü‡§ú",
      description: "‡§§‡§æ‡§ú‡§º‡•Ä ‡§î‡§∞ ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§π‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç",
    },
    {
      id: 4,
      name: "‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§µ‡§≤",
      farmer: "‡§ó‡•Å‡§∞‡§¶‡•Ä‡§™ ‡§∏‡§ø‡§Ç‡§π",
      location: "‡§Ö‡§Æ‡•É‡§§‡§∏‡§∞, ‡§™‡§Ç‡§ú‡§æ‡§¨",
      price: "‚Çπ55/kg",
      quantity: "400 kg",
      rating: 4.9,
      image: "/images/basmati-rice.jpg",
      farmerImage: "/images/punjabi-farmer-rice.jpg",
      verified: true,
      organic: true,
      distance: "15 km",
      harvestDate: "‡§Ü‡§ú",
      description: "‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§µ‡§≤, ‡§ñ‡•Å‡§∂‡§¨‡•Ç‡§¶‡§æ‡§∞ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§¶‡§ø‡§∑‡•ç‡§ü",
    },
    {
      id: 5,
      name: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ü‡§Æ‡§æ‡§ü‡§∞",
      farmer: "‡§Ö‡§®‡§ø‡§≤ ‡§ï‡•Å‡§Æ‡§æ‡§∞",
      location: "‡§®‡§æ‡§∂‡§ø‡§ï, ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
      price: "‚Çπ32/kg",
      quantity: "250 kg",
      rating: 4.6,
      image: "/images/fresh-tomatoes.jpg",
      farmerImage: "/images/organic-vegetables.jpg",
      verified: true,
      organic: true,
      distance: "18 km",
      harvestDate: "3 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á",
      description: "‡§∞‡§∏‡•Ä‡§≤‡•á ‡§î‡§∞ ‡§§‡§æ‡§ú‡§º‡•á ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ü‡§Æ‡§æ‡§ü‡§∞",
    },
    {
      id: 6,
      name: "‡§ó‡•á‡§π‡•Ç‡§Ç",
      farmer: "‡§∏‡•Å‡§∞‡•á‡§∂ ‡§Ø‡§æ‡§¶‡§µ",
      location: "‡§Ü‡§ó‡§∞‡§æ, ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
      price: "‚Çπ25/kg",
      quantity: "600 kg",
      rating: 4.5,
      image: "/images/wheat-grains.jpg",
      farmerImage: "/images/male-farmer-wheat.jpg",
      verified: true,
      organic: false,
      distance: "25 km",
      harvestDate: "1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§™‡§π‡§≤‡•á",
      description: "‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡§æ ‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§¨‡•á‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§®",
    },
  ]

  const categories = [
    { value: "all", label: "‡§∏‡§≠‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç" },
    { value: "grains", label: "‡§Ö‡§®‡§æ‡§ú" },
    { value: "vegetables", label: "‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç" },
    { value: "fruits", label: "‡§´‡§≤" },
    { value: "organic", label: "‡§ú‡•à‡§µ‡§ø‡§ï" },
    { value: "cotton", label: "‡§ï‡§™‡§æ‡§∏" },
  ]

  const locations = [
    { value: "all", label: "‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§•‡§æ‡§®" },
    { value: "bihar", label: "‡§¨‡§ø‡§π‡§æ‡§∞" },
    { value: "haryana", label: "‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ" },
    { value: "punjab", label: "‡§™‡§Ç‡§ú‡§æ‡§¨" },
    { value: "maharashtra", label: "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞" },
    { value: "up", label: "‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂" },
  ]

  const filteredCrops = crops.filter((crop) => {
    const matchesSearch =
      crop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      crop.farmer.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory =
      selectedCategory === "all" ||
      (selectedCategory === "organic" && crop.organic) ||
      (selectedCategory === "grains" && ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ß‡§æ‡§®", "‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§µ‡§≤"].includes(crop.name)) ||
      (selectedCategory === "vegetables" && ["‡§π‡§∞‡•Ä ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç", "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ü‡§Æ‡§æ‡§ü‡§∞"].includes(crop.name)) ||
      (selectedCategory === "cotton" && crop.name === "‡§ï‡§™‡§æ‡§∏")
    const matchesLocation =
      selectedLocation === "all" ||
      crop.location.includes(locations.find((l) => l.value === selectedLocation)?.label || "")

    return matchesSearch && matchesCategory && matchesLocation
  })

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-orange-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b-2 border-green-200">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-green-600 to-orange-500 rounded-full flex items-center justify-center">
                <Leaf className="h-6 w-6 text-white" />
              </div>
              <div>
                <span className="text-xl font-bold text-gray-800">KisanSetu</span>
                <p className="text-xs text-orange-600">‡§§‡§æ‡§ú‡§º‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞</p>
              </div>
            </Link>

            <div className="flex items-center gap-4">
              <Button variant="outline" className="border-green-200 bg-transparent">
                <Heart className="h-4 w-4 mr-2" />
                ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ
              </Button>
              <Button variant="outline" className="border-orange-200 bg-transparent">
                <Truck className="h-4 w-4 mr-2" />
                ‡§ï‡§æ‡§∞‡•ç‡§ü (0)
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Page Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2 text-gray-800">üõí ‡§§‡§æ‡§ú‡§º‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞</h1>
          <p className="text-gray-600">‡§∏‡•Ä‡§ß‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç, ‡§§‡§æ‡§ú‡§º‡§ó‡•Ä ‡§ï‡•Ä ‡§ó‡§æ‡§∞‡§Ç‡§ü‡•Ä</p>
        </div>

        {/* Search and Filters */}
        <div className="bg-white p-6 rounded-lg shadow-sm border-2 border-green-100 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="md:col-span-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="‡§´‡§∏‡§≤ ‡§Ø‡§æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 border-green-200"
                />
              </div>
            </div>

            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="border-green-200">
                <SelectValue placeholder="‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.value} value={category.value}>
                    {category.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={selectedLocation} onValueChange={setSelectedLocation}>
              <SelectTrigger className="border-green-200">
                <SelectValue placeholder="‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç" />
              </SelectTrigger>
              <SelectContent>
                {locations.map((location) => (
                  <SelectItem key={location.value} value={location.value}>
                    {location.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center gap-4 mt-4">
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-gray-600" />
              <span className="text-sm text-gray-600">‡§´‡§ø‡§≤‡•ç‡§ü‡§∞:</span>
            </div>
            <div className="flex gap-2">
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                <Shield className="h-3 w-3 mr-1" />
                ‡§¨‡•ç‡§≤‡•â‡§ï‡§ö‡•á‡§® ‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§á‡§°
              </Badge>
              <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                <Leaf className="h-3 w-3 mr-1" />
                ‡§ú‡•à‡§µ‡§ø‡§ï
              </Badge>
              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                <Truck className="h-3 w-3 mr-1" />
                ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä
              </Badge>
            </div>
          </div>
        </div>

        {/* Results Count */}
        <div className="mb-6">
          <p className="text-gray-600">
            <span className="font-semibold text-green-700">{filteredCrops.length}</span> ‡§´‡§∏‡§≤‡•á‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç
          </p>
        </div>

        {/* Crops Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCrops.map((crop, index) => (
            <motion.div
              key={crop.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <Card className="h-full hover:shadow-xl transition-all duration-300 border-2 border-green-100 hover:border-green-300 group">
                <div className="relative">
                  <img
                    src={crop.image || "/placeholder.svg"}
                    alt={crop.name}
                    className="w-full h-48 object-cover rounded-t-lg"
                  />
                  <div className="absolute top-3 left-3 flex gap-2">
                    {crop.verified && (
                      <Badge className="bg-green-600 text-xs">
                        <Shield className="h-3 w-3 mr-1" />
                        ‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§á‡§°
                      </Badge>
                    )}
                    {crop.organic && (
                      <Badge className="bg-orange-500 text-xs">
                        <Leaf className="h-3 w-3 mr-1" />
                        ‡§ú‡•à‡§µ‡§ø‡§ï
                      </Badge>
                    )}
                  </div>
                  <div className="absolute top-3 right-3">
                    <Button size="sm" variant="ghost" className="bg-white/80 hover:bg-white">
                      <Heart className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg text-gray-800">{crop.name}</CardTitle>
                    <div className="flex items-center gap-1">
                      <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                      <span className="text-sm font-medium">{crop.rating}</span>
                    </div>
                  </div>
                  <CardDescription className="text-sm">{crop.description}</CardDescription>
                </CardHeader>

                <CardContent className="space-y-4">
                  <div className="flex items-center gap-2">
                    <img
                      src={crop.farmerImage || "/placeholder.svg"}
                      alt={crop.farmer}
                      className="w-8 h-8 rounded-full object-cover border border-green-200"
                    />
                    <div>
                      <p className="font-medium text-sm text-gray-800">{crop.farmer}</p>
                      <p className="text-xs text-gray-600 flex items-center gap-1">
                        <MapPin className="h-3 w-3" />
                        {crop.location} ‚Ä¢ {crop.distance}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">‡§ï‡•Ä‡§Æ‡§§</p>
                      <p className="font-bold text-green-700 text-lg">{crop.price}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">‡§â‡§™‡§≤‡§¨‡•ç‡§ß</p>
                      <p className="font-medium">{crop.quantity}</p>
                    </div>
                  </div>

                  <div className="text-xs text-gray-500">
                    <p>‡§π‡§æ‡§∞‡•ç‡§µ‡•á‡§∏‡•ç‡§ü: {crop.harvestDate}</p>
                  </div>

                  <div className="flex gap-2">
                    <Link href={`/crop/${crop.id}`} className="flex-1">
                      <Button className="w-full bg-green-600 hover:bg-green-700">‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç</Button>
                    </Link>
                    <Button variant="outline" className="border-orange-200 hover:bg-orange-50 bg-transparent">
                      <Truck className="h-4 w-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        {/* Empty State */}
        {filteredCrops.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 mb-4">
              <Search className="h-16 w-16 mx-auto" />
            </div>
            <h3 className="text-xl font-semibold text-gray-600 mb-2">‡§ï‡•ã‡§à ‡§´‡§∏‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä</h3>
            <p className="text-gray-500">‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ñ‡•ã‡§ú ‡§Ø‡§æ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§¨‡§¶‡§≤‡§ï‡§∞ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç</p>
          </div>
        )}
      </div>
    </div>
  )
}
