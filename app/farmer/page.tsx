"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Mic, Plus, Upload, Wallet, TrendingUp, Users, Shield, Camera, MapPin, Leaf, Star, Coins } from "lucide-react"
import Link from "next/link"
import { motion } from "framer-motion"

export default function FarmerDashboard() {
  const [isVoiceActive, setIsVoiceActive] = useState(false)
  const [selectedCrop, setSelectedCrop] = useState("")
  const [cropQuantity, setCropQuantity] = useState("")
  const [cropPrice, setCropPrice] = useState("")

  const farmerProfile = {
    name: "‡§∞‡§æ‡§Æ ‡§∏‡§ø‡§Ç‡§π",
    location: "‡§ï‡§∞‡§®‡§æ‡§≤, ‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ",
    image: "/images/male-farmer-cotton.jpg",
    completeness: 85,
    totalEarnings: "‚Çπ1,25,000",
    monthlyEarnings: "‚Çπ45,000",
    totalCrops: 12,
    activeCrops: 5,
    rating: 4.8,
    verified: true
  }

  const myCrops = [
    {
      id: 1,
      name: "‡§ï‡§™‡§æ‡§∏",
      quantity: "300 kg",
      price: "‚Çπ45/kg",
      status: "‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
      image: "/images/organic-vegetables.jpg",
      harvestDate: "2024-01-15",
      views: 45,
      inquiries: 8
    },
    {
      id: 2,
      name: "‡§ó‡•á‡§π‡•Ç‡§Ç",
      quantity: "500 kg",
      price: "‚Çπ25/kg",
      status: "‡§¨‡•á‡§ö‡•Ä ‡§ó‡§à",
      image: "/images/wheat-grains.jpg",
      harvestDate: "2024-01-10",
      views: 32,
      inquiries: 12
    },
    {
      id: 3,
      name: "‡§∏‡§∞‡§∏‡•ã‡§Ç",
      quantity: "200 kg",
      price: "‚Çπ35/kg",
      status: "‡§™‡•à‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç",
      image: "/images/organic-vegetables.jpg",
      harvestDate: "2024-01-20",
      views: 28,
      inquiries: 5
    }
  ]

  const recentOrders = [
    {
      id: 1,
      buyer: "‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞",
      crop: "‡§ï‡§™‡§æ‡§∏",
      quantity: "50 kg",
      amount: "‚Çπ2,250",
      status: "‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ",
      blockchain: true,
    },
    {
      id: 2,
      buyer: "‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ",
      crop: "‡§ó‡•á‡§π‡•Ç‡§Ç",
      quantity: "100 kg",
      amount: "‚Çπ2,500",
      status: "‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡§ø‡§ü ‡§Æ‡•á‡§Ç",
      blockchain: true,
    },
  ]

  const fundingOffers = [
    {
      id: 1,
      backer: "‡§Ö‡§ó‡•ç‡§∞‡§ø‡§ï‡§≤‡•ç‡§ö‡§∞ ‡§´‡§Ç‡§°",
      amount: "‚Çπ50,000",
      crop: "‡§ï‡§™‡§æ‡§∏",
      terms: "6 ‡§Æ‡§π‡•Ä‡§®‡•á, 8% ‡§¨‡•ç‡§Ø‡§æ‡§ú",
      status: "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§"
    },
    {
      id: 2,
      backer: "‡§ó‡•ç‡§∞‡•Ä‡§® ‡§á‡§®‡•ç‡§µ‡•á‡§∏‡•ç‡§ü",
      amount: "‚Çπ75,000",
      crop: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§¨‡•ç‡§ú‡•Ä",
      terms: "4 ‡§Æ‡§π‡•Ä‡§®‡•á, 10% ‡§∞‡§ø‡§ü‡§∞‡•ç‡§®",
      status: "‡§™‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó"
    }
  ]

  const cropOptions = [
    "‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ö‡§æ‡§µ‡§≤", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§¨‡§æ‡§ú‡§∞‡§æ", "‡§ú‡•ç‡§µ‡§æ‡§∞", "‡§¶‡§æ‡§≤", "‡§ö‡§®‡§æ", "‡§Æ‡§ü‡§∞", 
    "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§∏‡•Ç‡§∞‡§ú‡§Æ‡•Å‡§ñ‡•Ä", "‡§ü‡§Æ‡§æ‡§ü‡§∞", "‡§™‡•ç‡§Ø‡§æ‡§ú", "‡§Ü‡§≤‡•Ç", "‡§ó‡§æ‡§ú‡§∞", "‡§™‡§§‡•ç‡§§‡§æ‡§ó‡•ã‡§≠‡•Ä", "‡§ï‡§™‡§æ‡§∏"
  ]

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-orange-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b-2 border-green-200">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-green-600 to-orange-500 rounded-full flex items-center justify-center">
                <Leaf className="h-6 w-6 text-white" />
              </div>
              <div>
                <span className="text-xl font-bold text-gray-800">KisanSetu</span>
                <p className="text-xs text-orange-600">‡§ï‡§ø‡§∏‡§æ‡§® ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°</p>
              </div>
            </Link>

            <div className="flex items-center gap-4">
              <Button
                variant="outline"
                size="sm"
                className={`border-2 ${isVoiceActive ? "border-red-500 bg-red-50" : "border-green-500 bg-green-50"}`}
                onClick={() => setIsVoiceActive(!isVoiceActive)}
              >
                <Mic className="h-4 w-4 mr-1" />
                {isVoiceActive ? "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç" : "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡§π‡§æ‡§Ø‡§ï"}
              </Button>
              <Link href="/marketplace">
                <Button variant="outline" className="border-orange-200 bg-transparent">
                  ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </header>

      {/* Voice Assistant Active */}
      {isVoiceActive && (
        <motion.section
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="py-4 bg-green-600 text-white"
        >
          <div className="container mx-auto px-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="w-2 h-2 bg-white rounded-full animate-pulse" />
              <div className="w-2 h-2 bg-white rounded-full animate-pulse delay-75" />
              <div className="w-2 h-2 bg-white rounded-full animate-pulse delay-150" />
            </div>
            <p className="text-sm">üé§ ‡§ï‡§π‡•á‡§Ç: "‡§Æ‡•à‡§Ç 50 ‡§ï‡§ø‡§≤‡•ã ‡§ï‡§™‡§æ‡§∏ ‡§¨‡•á‡§ö‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å" ‡§Ø‡§æ "‡§Ü‡§ú ‡§ï‡§æ ‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"</p>
          </div>
        </motion.section>
      )}

      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Panel - Profile & Stats */}
          <div className="lg:col-span-1 space-y-6">
            {/* Profile Card */}
            <Card className="border-2 border-green-200">
              <CardHeader className="text-center">
                <div className="relative mx-auto w-20 h-20 mb-4">
                  <img
                    src={farmerProfile.image || "/placeholder.svg"}
                    alt={farmerProfile.name}
                    className="w-full h-full rounded-full object-cover border-2 border-green-300"
                  />
                  {farmerProfile.verified && (
                    <div className="absolute -bottom-1 -right-1 bg-green-600 rounded-full p-1">
                      <Shield className="h-3 w-3 text-white" />
                    </div>
                  )}
                </div>
                <CardTitle className="text-xl text-gray-800">{farmerProfile.name}</CardTitle>
                <CardDescription className="flex items-center justify-center gap-1">
                  <MapPin className="h-3 w-3" />
                  {farmerProfile.location}
                </CardDescription>
                <div className="flex items-center justify-center gap-1 mt-2">
                  <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                  <span className="font-medium">{farmerProfile.rating}</span>
                  <Badge className="ml-2 bg-green-600 text-xs">‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§á‡§°</Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="flex justify-between text-sm mb-2">
                      <span>‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ</span>
                      <span>{farmerProfile.completeness}%</span>
                    </div>
                    <Progress value={farmerProfile.completeness} className="h-2" />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div className="bg-green-50 p-3 rounded-lg">
                      <p className="text-2xl font-bold text-green-700">{farmerProfile.totalCrops}</p>
                      <p className="text-xs text-gray-600">‡§ï‡•Å‡§≤ ‡§´‡§∏‡§≤‡•á‡§Ç</p>
                    </div>
                    <div className="bg-orange-50 p-3 rounded-lg">
                      <p className="text-2xl font-bold text-orange-700">{farmerProfile.activeCrops}</p>
                      <p className="text-xs text-gray-600">‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Earnings Card */}
            <Card className="border-2 border-orange-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-orange-700">
                  <Wallet className="h-5 w-5" />
                  ‡§Ü‡§Æ‡§¶‡§®‡•Ä
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="text-center">
                    <p className="text-3xl font-bold text-green-700">{farmerProfile.monthlyEarnings}</p>
                    <p className="text-sm text-gray-600">‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á</p>
                  </div>
                  <div className="text-center">
                    <p className="text-xl font-semibold text-gray-700">{farmerProfile.totalEarnings}</p>
                    <p className="text-sm text-gray-600">‡§ï‡•Å‡§≤ ‡§Ü‡§Æ‡§¶‡§®‡•Ä</p>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    <Button size="sm" className="bg-orange-500 hover:bg-orange-600">
                      <TrendingUp className="h-3 w-3 mr-1" />
                      ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü
                    </Button>
                    <Button size="sm" variant="outline" className="border-green-200 bg-transparent">
                      <Coins className="h-3 w-3 mr-1" />
                      ‡§ü‡•ã‡§ï‡§®
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Funding Offers */}
            <Card className="border-2 border-blue-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-700">
                  <Users className="h-5 w-5" />
                  ‡§´‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§ë‡§´‡§∞‡•ç‡§∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {fundingOffers.map((offer) => (
                    <div key={offer.id} className="p-3 bg-blue-50 rounded-lg">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="font-medium text-sm">{offer.backer}</h4>
                        <Badge 
                          variant={offer.status === "‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§" ? "default" : "secondary"}
                          className="text-xs"
                        >
                          {offer.status}
                        </Badge>
                      </div>
                      <p className="text-lg font-bold text-blue-700">{offer.amount}</p>
                      <p className="text-xs text-gray-600">{offer.crop} ‚Ä¢ {offer.terms}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Panel - Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Add New Crop */}
            <Card className="border-2 border-green-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-green-700">
                  <Plus className="h-5 w-5" />
                  ‡§®‡§à ‡§´‡§∏‡§≤ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                </CardTitle>
                <CardDescription>
                  ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§∏‡•á ‡§Ø‡§æ ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ</label>
                    <Select value={selectedCrop} onValueChange={setSelectedCrop}>
                      <SelectTrigger>
                        <SelectValue placeholder="‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç" />
                      </SelectTrigger>
                      <SelectContent>
                        {cropOptions.map((crop) => (
                          <SelectItem key={crop} value={crop}>
                            {crop}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ (kg)</label>
                    <Input
                      placeholder="‡§ú‡•à‡§∏‡•á: 500"
                      value={cropQuantity}
                      onChange={(e) => setCropQuantity(e.target.value)}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">‡§ï‡•Ä‡§Æ‡§§ (‡§™‡•ç‡§∞‡§§‡§ø kg)</label>
                    <Input
                      placeholder="‡§ú‡•à‡§∏‡•á: 25"
                      value={cropPrice}
                      onChange={(e) => setCropPrice(e.target.value)}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">‡§π‡§æ‡§∞‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ</label>
                    <Input type="date" />
                  </div>

                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium mb-2">‡§µ‡§ø‡§µ‡§∞‡§£</label>
                    <Textarea placeholder="‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç..." />
                  </div>

                  <div className="md:col-span-2">
                    <div className="flex gap-4">
                      <Button className="flex-1 bg-green-600 hover:bg-green-700">
                        <Upload className="h-4 w-4 mr-2" />
                        ‡§´‡§∏‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                      </Button>
                      <Button variant="outline" className="border-orange-200 bg-transparent">
                        <Camera className="h-4 w-4 mr-2" />
                        ‡§´‡•ã‡§ü‡•ã ‡§≤‡•á‡§Ç
                      </Button>
                      <Button 
                        variant="outline" 
                        className={`border-2 ${isVoiceActive ? "border-red-500 bg-red-50" : "border-green-500 bg-green-50"}`}
                        onClick={() => setIsVoiceActive(!isVoiceActive)}
                      >
                        <Mic className="h-4 w-4 mr-2" />
                        ‡§Ü‡§µ‡§æ‡§ú‡§º
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* My Crops */}
            <Card className="border-2 border-blue-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-700">
                  <Leaf className="h-5 w-5" />
                  ‡§Æ‡•á‡§∞‡•Ä ‡§´‡§∏‡§≤‡•á‡§Ç
                </CardTitle>
                <CardDescription>‡§Ö‡§™‡§®‡•Ä ‡§∏‡•Ç‡§ö‡•Ä‡§¨‡§¶‡•ç‡§ß ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {myCrops.map((crop) => (
                    <motion.div
                      key={crop.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{
